#!/usr/bin/env node

var program = require("commander");
var pkg = require("../package.json");
var path = require("path");
var fs = require("fs");
var config = null;

try
{
	config = require(path.join(process.cwd(), "config"));
	config.appRoot = config.appRoot || "";
}
catch(ex)
{
	config = {appRoot: ""};
}

var appRoot = path.join(process.cwd(), config.appRoot);

program
  .version(pkg.version)
  .option("-g, --generate [name]", "generate a basic widget")
  .option("-s, --server [port]", "start minimal widgets server")
  .option("-a, --all", "load all widgets (applies to server)")
  .option("-r, --render [type]", "render a widget as a static web page")
  .parse(process.argv);

if(program.generate)
{
	(function(fn)
	{
		if(program.generate === true)
			program.prompt("widget name: ", fn);
		else
			fn(program.generate);
	})(function(name)
	{
		var comps = name.split(".");
		comps.splice(0, 0, "widgets");

		var dir = appRoot;
		while(comps.length > 0)
		{
			var comp = comps[0];
			comps.splice(0, 1);
			dir = path.join(dir, comp);
			if(!fs.existsSync(dir))
				fs.mkdirSync(dir);
		}

		var nameComps = name.split(".");
		var baseName = nameComps[nameComps.length-1];
		var rootName = path.join(dir, baseName);

		if(!fs.existsSync(rootName+".html"))
		{
			console.log("generate: "+path.relative(process.cwd(), rootName+".html"));
			fs.writeFileSync(rootName+".html", "<div>\n\t<h1>"+baseName+"</h1>\n</div>\n", "UTF-8");
		}

		if(!fs.existsSync(rootName+".css"))
		{
			console.log("generate: "+path.relative(process.cwd(), rootName+".css"));
			fs.writeFileSync(rootName+".css", ".__CLASS__\n{\n}\n", "UTF-8");
		}

		if(!fs.existsSync(rootName+".js"))
		{
			console.log("generate: "+path.relative(process.cwd(), rootName+".js"));
			fs.writeFileSync(rootName+".js", "var widget =\n{\n\tready: function($$)\n\t{\n\t\t// widget has been rendered\n\t}\n};\n", "UTF-8");
		}
	});
}

if(program.all)
{
	require("phnq_widgets").config.loadAllWidgets = true;
}

if(program.server)
{
	var port = program.server === true ? 7777 : program.server;
	console.log("\nStarting phnq_widgets server on port", port, "...\n");
	var phnq_widgets = require("phnq_widgets");
	phnq_widgets.start({port:port, appRoot:appRoot});
}

if(program.render)
{
	var type = program.render;
	var phnq_widgets = require("phnq_widgets");
	var indexFile = program.args.length == 0 ? type + ".html" : program.args[0];
	
	phnq_widgets.renderStaticWidget(type, appRoot, indexFile, function(err)
	{
		if(err)
		{
			console.log("Error rendering widget: ", type, err);
		}
	});
}
